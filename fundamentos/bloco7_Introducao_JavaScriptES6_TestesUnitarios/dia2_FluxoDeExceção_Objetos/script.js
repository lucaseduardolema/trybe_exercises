// 1 ðŸš€ - Crie um erro personalizado que serÃ¡ chamado se a pessoa usuÃ¡ria digitar apenas um nÃºmero.
// Tente executar a aplicaÃ§Ã£o com um dos valores em branco. Notou que o retorno nÃ£o Ã© muito descritivo?
// Utilize o throw new Error e o bloco try/catch.
// Imprima o erro no parÃ¡grafo com id result, para que a pessoa usuÃ¡ria saiba o que aconteceu. Lembre-se de usar erros descritivos!
// Evite funÃ§Ãµes que tenham muitas responsabilidades distintas.
// 2 ðŸš€ - Agora adicione uma outra exceÃ§Ã£o, caso a pessoa usuÃ¡ria digite um valor que nÃ£o seja numÃ©rico.
// VocÃª pode fazer essa verificaÃ§Ã£o utilizando a funÃ§Ã£o isNan().
// 3 ðŸš€ - VocÃª se lembrou de limpar os inputs apÃ³s o clique do botÃ£o? Teve que repetir cÃ³digo para isso? Que tal refatorar sua funÃ§Ã£o utilizando o finally?

const verificaInput = (value1, value2) => {
  if (value1 === '' || value2 === '') {
    throw new Error('Digite dois nÃºmeros')
  }
  if (typeof value1 !== 'number' || typeof value2 !== 'number') {
    throw new Error('Digite dois nÃºmeros')
  }
}

function sum() {
  try {
    const value1 = document.getElementById('value1').value;
    const value2 = document.getElementById('value2').value;
    verificaInput(value1, value2)
    const result = parseInt(value1) + parseInt(value2);
    document.getElementById('result').innerHTML = `Resultado: ${result}`;
  } catch (error) {
    console.log(error)
    document.getElementById('result').innerHTML = error.message;
  } finally {
    document.getElementById('value1').value = '';
    document.getElementById('value2').value = '';
  }
}
window.onload = () => {
  const button = document.getElementById('button');
  button.addEventListener('click', sum);
}